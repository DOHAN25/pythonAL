# 리스트는 매우 다양한 기능을 제공한다. 순차적 시퀀스이다. 순서가 있다는게 매우 중요하다

# 선언
a = list()

# 선언2
a = []

# 초기값을 지정해 선언하거나 append()로 추가할 수 있다.
a = [1, 2, 3]
print(a)
a.append(4)
print(a)

# insert() 함수를 사용하면 특정 위치에 인덱스를 지정해 요소를 추가할 수 있다. ex) 3번째 인덱스에 5를 삽입해보자
a.insert(3, 5)
print(a)

# 리스트는 숫자 말고도 다양한 자료형을 단일 리스트에 관리할 수 있다.
a.append('안녕')
a.append(True)
print(a)

# 값을 꺼내올 때는 단순하게 인덱스를 지정하면 된다.
print(a[5])

# 파이썬 리스트에는 슬라이싱(slicing) 기능이 있어서 특정 범위 내의 값을 매우 편리하게 가져올 수 있다.
# 다음과 같이 인덱스 1에서 인덱스 3이전까지의 값을 가져오는법
print(a[1:3])
# 시작 인덱스는 생략도 가능하다.
print(a[:3])
# 종료 인덱스 또한 생략 가능하다.
print(a[4:])
# 세번째 파라미터를 부여하면 단계step의 의미로 단계를 2로 지정할 경우 두 칸씩 건너뛰게 된다.
print(a[1:4:2])
# 존재하지 않는 인덱스를 조회할 경우 IndexError가 발생한다.

# 리스트에서 요소를 삭제하는 방법은 크게 2가지가 있다.
# 1. 인덱스로 삭제하기
# 2. 값으로 삭제하기

# del 함수를 사용하면 해당인덱스에 값을 삭제할 수 있다.
del a[1]
print(a)
# remove() 함수를 사용하면 값에 해당하는 요소를 삭제할 수 있다.
a.remove('안녕')
print(a)

# pop() 함수를 사용하면 스택의 팝 연산처럼 추출로 처리된다. 즉 삭제될 값을 리턴하고 삭제가 진행된다.
a = [1, 5, 4, '안녕', True]
print(a.pop(3))
print(a)

# 파이썬의 리스트는 연속된 공간에 요소를 배치하는 배열의 장점과 다양한 타입을 연결해 배치하는 연결 리스트의 장점을
# 모두 취한 듯한 형태를 띄며, 실제로 리스트를 잘 사용하기만 해도 배열과 연결 리스트가 모두 필요 없을 정도로 강력하다.

# 파이썬 리스트는 포인터 목록을 배열 형태로 관리한다. 인덱스를 조회하는 데에 모든 포인터의 위치를 찾아가서
# 타입 코드를 확인하고 값을 일일이 살펴봐야 하기 때문에 속도는 떨어지게 된다.



